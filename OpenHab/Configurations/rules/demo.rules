import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.openhab.action.*
import java.lang.Math
import org.joda.time.*

var Number counter = 1
//var Timer timer = null
var Timer MailMemoryCrit_timer = null
var Timer MailMemoryWarn_timer = null
var Timer MailCPUCrit_timer = null
var Timer MailCPUWarn_timer = null
var Timer MailHDDCrit_timer = null
var Timer MailHDDWarn_timer = null
// LR Timers
var Timer tLRHeaterStart
var Timer tLRHeaterStop

//BR Timers
var Timer tendTimeMorning
var Timer tstartTimeMorning
var Timer tendTimeAfternoon
var Timer tstartTimeAfternoon
var String Boiler_EndTimeMorning = "06:00"
var String Boiler_EndTimeAfternoon = "18:30"



rule "Hourly different stuff"
when Time cron "0 0 * * * ?" 
then
	logDebug("RULES","Hourly rule run")
    executeCommandLine("touch /hab/openhab/configurations/persistence/mysql.persist")  // make sure that persistences got restored at least hourly
end

rule "Daily start of the day"
when Time cron "0 1 0 * * ?" 
then
    logDebug("RULES","Daily START of ther day")
end

rule "Daily end of the day"
when Time cron "0 55 23 * * ?" 
then
    logDebug("RULES","Daily END of ther day")
    postUpdate(LR_Temp_avg,LR_Temp_sensor1.averageSince(now.toDateMidnight))
end
/*
rule Startup
when 
	System started
then
	say("Welcome at openHab!")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end
*/
/*rule "Crontest"
	when 
		Time cron "0/15 * * * * ?"
	then
		say(counter)
		counter = counter + 1
end	

/**
 * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands 
 * and posting an updated state on the bus 
 */


/**
 * This rule demonstrates how a NumberItem can be used to easily control the local sound system.
 * A selection widget in the UI provides easy access for this
 */
rule "Select Radio Station"
	when
		Item Radio_Station received command
	then
		switch(receivedCommand) {
			case 0 : playStream(null)
			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
		}
end



/**
 * The following rules help initializing the demo items with some helpful states.
 */

rule "Initialize states of variables"
	when
		System started or Item ALL_Reinitialize received command
	then 
//Living room initialize	
	sendCommand(LR_Heater1,OFF)   //default value of living room heater is OFF
	postUpdate(LR_Heater1_mode,2)  // default mode is AUTO
//	postUpdate(LR_Set_Time,4.5) // Time 
//	postUpdate(LR_Set_Temperature1,16)  //16C during work hours
//	postUpdate(LR_Set_Temperature2,20) // 20C when at home
//	postUpdate(LR_Set_Temperature3,18) //20C when at home and sleeping /16C for Living room
//	postUpdate(LR_Temp_sensor1)
//Aquarium initialize	
	sendCommand(AQ_Heater1,OFF)  // default aquarium heater off
	sendCommand(AQ_Cooler1,OFF)  // default aquarium cooler off
	sendCommand(AQ_Light1,OFF)  // default aquarium light off
	postUpdate(AQ_Logics_mode,2)  // default mode is AUTO
	sendCommand(OpenHAB,0)  // default aquarium heater off
	sendCommand(BackupSystem,OFF)  // default aquarium heater off
	postUpdate(Weather_Station_count,0); //clear reboot counter on reset
	sendCommand(BR_Fan,OFF)  // default bathroom stuff OFF
	sendCommand(BR_Heater,OFF) // default bathroom stuff OFF
	sendCommand(BR_Boiler,OFF) // default bathroom stuff OFF
//	postUpdate(BR_Temp_Boiler_Set,50); // SET temperature BOILER
//	postUpdate(BR_Temp_Room_Set,22); // SET TEMPERATURE
//	postUpdate(BR_Humidity_Set,40); // SET HUMIDITY
//	postUpdate(AQ_Set_Temperature,25) // 25C initial aquarium temp value
//	postUpdate(AQ_TempDelta,2) 

    executeCommandLine("touch /hab/openhab/configurations/persistence/mysql.persist")
	logDebug("RULES","System Initialization ENDS HERE")
end

//rule "Evening shutters down"
//	when
//	then
//end
	
 /* */ 
rule "Update max and min temperatures"
when
	Time cron "0 0/5 * * * ?" or
	System started
then	
// My Station
	postUpdate(Weather_Temp_Max, Weather_temperature1.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, Weather_temperature1.minimumSince(now.toDateMidnight).state)
// Weather Underground
	postUpdate(Weather_temperature_Max_wunderground, Weather_temperature_wunderground.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_temperature_Min_wunderground, Weather_temperature_wunderground.minimumSince(now.toDateMidnight).state)
// Yahoo weather	
	postUpdate(Weather_temperature_Max_yahoo, Weather_Temperature_yahoo.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_temperature_Min_yahoo, Weather_Temperature_yahoo.minimumSince(now.toDateMidnight).state)
// Aquarium	
	postUpdate(AQ_Temp_MAX, AQ_Temp_Sensor1.maximumSince(now.minusDays(1)).state)
	postUpdate(AQ_Temp_MIN, AQ_Temp_Sensor1.minimumSince(now.minusDays(1)).state)
	logDebug("RULES","MIN/MAX ENDS HERE")
	
	postUpdate(Weather_forecast_yahoo_avg,(Weather_forecast_yahoo_low.state as DecimalType +Weather_forecast_yahoo_high.state as DecimalType)/2)
end

/** shows how to use sensor values from the past */
rule "Persistence Demo"
when
	Time cron "0 * * * * ?"
then	
	if(Weather_temperature1.changedSince(now.minusMinutes(1))) {
		println("2 minutes ago, the temperature was " + Weather_temperature1.historicState(now.minusMinutes(2)) + " degrees.")	
	}
	postUpdate(Weather_temperature1,Weather_temperature2.state)
	logDebug("RULES","Persistence demo ends HERE")
end /* */


/////////////////////////////////////////////////////////////////////////////////////////// 
// Creates an item that stores the last update time of this item
rule "Weather update time" 
when Item Weather_Temperature1 received update then postUpdate(Weather_temperature1_LastUpdate, new DateTimeType())end

rule "LR temperature sensor update time"
when  Item LR_Temp_sensor1 received update then postUpdate(LR_Temp_sensor1_LastUpdate, new DateTimeType()) end

rule "LR Humidity update time"
when  Item LR_Humidity_sensor1 received update then postUpdate(LR_Humidity_sensor1_LastUpdate, new DateTimeType()) end

rule "Aquarium temperature update time"
when  Item AQ_Temp_sensor1 received update then postUpdate(AQ_Temp_Sensor1_LastUpdate, new DateTimeType()) end

rule "Weather pressure BMP180 update time"
when  Item Weather_pressure received update then postUpdate(Weather_pressure_LastUpdate, new DateTimeType()) end

rule "Weather altitude BMP180 update time"
when  Item Weather_altitude received update then postUpdate(Weather_altitude_LastUpdate, new DateTimeType()) end

rule "Weather temperature BMP180 update time"
when  Item Weather_temperature1 received update then postUpdate(Weather_temperature1_LastUpdate, new DateTimeType()) end

rule "Weather humidity DHT22 update time"
when  Item Weather_humidity received update then postUpdate(Weather_humidity_LastUpdate, new DateTimeType()) end

rule "Bathroom Boiler Temperature update time"
when  Item BR_Temp_Boiler received update then postUpdate(BR_Temp_Boiler_LastUpdate, new DateTimeType()) end

rule "Bathroom Humidity update time"
when  Item BR_Humidity_sensor received update then postUpdate(BR_Humidity_sensor_LastUpdate, new DateTimeType()) end

rule "Bathroom Temperature update time"
when  Item BR_Temp_sensor received update then postUpdate(BR_Temp_sensor_LastUpdate, new DateTimeType()) end

rule "Boiler manual change"
when Item BR_Boiler_state received command then
	if(BR_Boiler_state.state==ON) {
		 postUpdate(BR_Boiler_last_ONtime, new DateTimeType())
	} else {
		postUpdate(BR_Boiler_last_OFFtime, new DateTimeType())
	}
end

rule "LR Heater change"
when Item LR_Heater1 received command then
	if(LR_Heater1.state==ON) {
		 postUpdate(LR_Heater_last_ONtime, new DateTimeType())
	} else {
		postUpdate(LR_Heater_last_OFFtime, new DateTimeType())
	}
end

//Number BR_Temp_Boiler_LastUpdate "Last Update [%1$ta %1$tR]"	<clock>
//Number BR_Humidity_sensor_LastUpdate "Last Update [%1$ta %1$tR]"	<clock>
//Number BR_Temp_sensor_LastUpdate "Last Update [%1$ta %1$tR]"	<clock>

rule "Weather arduino resets"
when Item Weather_Station_count received command then 
val Number count=Weather_Station_count.state as DecimalType
	counter=count+1
	postUpdate(Weather_Station_count,count) 
end



/* */
////////////////////////////////////////////////////////////////////////////////////////////
	
/* LR Triggers */

rule "Living room heating timers"
	when Time cron "0 0 20 * * ?" or Item LR_Set_Time received command or Item LR_Heater1_mode received command then
	var DateTime LRHeaterEndTime=parse(now.getYear() + "-" + now.getMonthOfYear() + "-" + now.getDayOfMonth() + "T06:00:00")
	LRHeaterEndTime=LRHeaterEndTime.plusDays(1); // Heater ends time is always next day at 6:00 due to better pricing conditions :P
	var DateTime LRHeaterStartTime=LRHeaterEndTime.minusMinutes(60*((LR_Set_Time.state as DecimalType).intValue)) // Start time is calculated by substracting 60 mins * Set time input value
//	var LR_Temp_Sensor1=LR_Temp_sensor1.state as DecimalType
	// Cancel timers in any case as they're going to be recreated anyway if you use AUTO mode. In MANUAL and OFF they should be OFF too...

	if (tLRHeaterStart != null) {
		logInfo("RULES","LR:Canceling LR Start timer")
		tLRHeaterStart.cancel
	}
	if (tLRHeaterStop != null) {
		logInfo("RULES","LR:Canceling LR Stop timer")
		tLRHeaterStop.cancel
	}	
	switch(LR_Heater1_mode.state) {
			case 0: {
						logDebug("RULES","LR:Mode OFF")
						sendCommand(LR_Heater1,OFF)
						postUpdate(LR_Heater_last_OFFtime, new DateTimeType())
					}	
			case 1: logDebug("RULES","LR:Mode MANUAL")		
			case 2 : 	{
				logInfo("RULES","LR Start timer has been SET="+LRHeaterStartTime)
				tLRHeaterStart = createTimer(LRHeaterStartTime) [| 
					logInfo("RULES","LR:STARTING HEATER TIME")
					sendCommand(LR_Heater1,ON)
					postUpdate(LR_Heater_last_ONtime, new DateTimeType())
				]
				logInfo("RULES","LR Stop timer has been SET="+LRHeaterEndTime)
    			tLRHeaterStop = createTimer(LRHeaterEndTime) [| 
    				logInfo("RULES","LR:STOPPING HEATER TIME")
    				sendCommand(LR_Heater1,OFF)
    				postUpdate(LR_Heater_last_OFFtime, new DateTimeType())
    			]					
			}
		}
	logInfo("RULES","LR:Living room timers/logics rule ends here")
end
	
	

/************************ BATHROOM********************* */
rule "Boiler heating timeframe"
	when Time cron "0 1 0 * * ?" or Item TestButton received command then   
    var DateTime endTimeMorning=parse(now.getYear() + "-" + now.getMonthOfYear() + "-" + now.getDayOfMonth() + "T" + Boiler_EndTimeMorning + ":00")     
    var DateTime startTimeMorning = endTimeMorning.minusMinutes(100)
    var DateTime endTimeAfternoon = parse(now.getYear() + "-" + now.getMonthOfYear() + "-" + now.getDayOfMonth() + "T" + Boiler_EndTimeAfternoon + ":00")
    var DateTime startTimeAfternoon = endTimeAfternoon.minusMinutes(100)
    
    logInfo("RULES","BR:Boiler timer:"+startTimeMorning+","+endTimeMorning+","+startTimeAfternoon+","+endTimeAfternoon)
    if (tstartTimeMorning != null) {
    	logInfo("RULES","BR:BOILER TIMER: CANCEL START MORNING BOILER TIMER")
    	tstartTimeMorning.cancel
    }
    if (tendTimeMorning != null) {
    	logInfo("RULES","BR:BOILER TIMER: CANCEL END MORNING BOILER TIMER")
    	tendTimeMorning.cancel
    }
    if (tstartTimeAfternoon != null) {
    	logInfo("RULES","BR:BOILER TIMER: CANCEL START AFTERNOON BOILER TIMER")
    	tstartTimeAfternoon.cancel
    }
    if (tendTimeAfternoon != null) {
    	logInfo("RULES","BR:BOILER TIMER: CANCEL END AFTERNOON BOILER TIMER")
    	tendTimeAfternoon.cancel
    }
    
 if(BR_Mode.state>0) {
 		logInfo("RULES","BR Boiler morning start timer has been SET="+startTimeMorning)
     	tstartTimeMorning = createTimer(startTimeMorning) [| 
     		logInfo("RULES","BR:BOILER TIMER: STARTING MORNING BOILER TIME")
     		sendCommand(BR_Boiler,ON)
     		postUpdate(BR_Boiler_last_ONtime, new DateTimeType())  
     	]
 		logInfo("RULES","BR Boiler morning stop timer has been SET="+tendTimeMorning)
     	tendTimeMorning = createTimer(endTimeMorning) [| 
     		logInfo("RULES","BR:BOILER TIMER: STOPPING MORNING BOILER TIME")
     		sendCommand(BR_Boiler,OFF)
     		postUpdate(BR_Boiler_last_OFFtime, new DateTimeType())
     	]
     	logInfo("RULES","BR Boiler afternooon start timer has been SET="+startTimeAfternoon)
     	tstartTimeAfternoon = createTimer(startTimeAfternoon) [| 
     		logInfo("RULES","BR:BOILER TIMER: STARTING AFTERNOON BOILER TIME")
     		sendCommand(BR_Boiler,ON)
     		postUpdate(BR_Boiler_last_ONtime, new DateTimeType())
     	]
     	logInfo("RULES","BR Boiler afternooon stop timer has been SET="+endTimeAfternoon)
     	tendTimeAfternoon = createTimer(endTimeAfternoon) [| 
     		logInfo("RULES","BR:BOILER TIMER: STOPPING AFTERNOON BOILER TIME")
     		sendCommand(BR_Boiler,OFF)
     		postUpdate(BR_Boiler_last_OFFtime, new DateTimeType())
     	]
     }
end

rule "Bathroom Humidity control"
	when Time cron"0 */5 * * * ?" or Item BR_Humidity_Set received update or Item BR_Mode received update or Item BR_Humidity_sensor received update then
	var humidity=BR_Humidity_sensor.state as DecimalType 
	var humidity_set=BR_Humidity_Set.state as DecimalType
	logDebug("RULES","BR FAN control started")
	switch (BR_Mode.state) {
	case 0: { sendCommand(BR_Fan,OFF) } 
	case 1: { logDebug("RULES","BR FAN manual mode") }
	case 2: {
		if(humidity<humidity_set&&BR_Fan_state.state==ON){ //
			sendCommand(BR_Fan,OFF)
			logDebug("RULES","BR FAN has stopped")
		} else if ((humidity>(humidity_set+7))&&BR_Fan_state.state==OFF){ //
			sendCommand(BR_Fan,ON)
			logDebug("RULES","BR FAN has started")
		}
		logDebug("RULES","BR FAN control ended")
		}
	}
end

rule "Bathroom Temperature control"
	when Time cron"0 */15 * * * ?" or Item BR_Temp_Room_Set received update or Item BR_Mode received update then
	var temperature=BR_Temp_sensor.state as DecimalType 
	var temperature_set=BR_Temp_Room_Set.state as DecimalType
	logDebug("RULES","BR Heater control started")
	switch (BR_Mode.state) {
	case 0: { sendCommand(BR_Heater,OFF) } 
	case 1: { logDebug("RULES","BR Temperature manual mode") }
	case 2: {
		if(temperature>=temperature_set&&BR_Heater_state.state==ON){ //
			sendCommand(BR_Heater,OFF)
			logDebug("RULES","BR Heater has stopped")
		} else if ((temperature<=temperature_set-1.5)&&BR_Heater_state.state==OFF){ //
			sendCommand(BR_Heater,ON)
			logDebug("RULES","BR Heater has started")
		}
		logDebug("RULES","BR Heater control ended")
		}
	}
end

rule "Bathroom Boiler - temp control"
	when Time cron"0 */15 * * * ?" or Item BR_Temp_Boiler_Set received update or Item BR_Temp_Boiler changed or Item BR_Mode received update then
	var temperature=BR_Temp_Boiler.state as DecimalType 
	var temperature_set=BR_Temp_Boiler_Set.state as DecimalType
	logDebug("RULES","BR Heater control started")
 	switch (BR_Mode.state) {
	case 0: { sendCommand(BR_Boiler,OFF) } 
	case 1: { 

		}
	case 2: {
		if(temperature>=temperature_set&&BR_Boiler_state.state==ON){ //
				sendCommand(BR_Boiler,OFF)
				logDebug("RULES","BR Heater has stopped")
			} 
			logDebug("RULES","BR Heater control ended")	/* */
			}	
	}

end


/***************************AQUARIUM *********************************/
rule "Calculate AQ delta"
	when Time cron"0 1 * * * ?"
	then
val tmp2 = AQ_Temp_Sensor1.averageSince(now.minusMinutes(90),"mysql").floatValue
val tmp1 = AQ_Temp_Sensor1.averageSince(now.minusMinutes(15),"mysql").floatValue
		val delta1 = tmp1 - tmp2  
		postUpdate(AQ_TempDelta1,delta1)	
//		logInfo("RULES","Tmp1=" + tmp1)
end

rule "Aquarium logics"
when Time cron "0 */15 * * * ?" or Item AQ_Logics_mode received command or Item AQ_Temp_Sensor1 changed
then
var float aq_temp_sensor=new Float(AQ_Temp_Sensor1.state.toString())
var float aq_temp_set_temp=new Float(AQ_Set_Temperature.state.toString())
val lr_temp_sensor1=LR_Temp_sensor1.state as DecimalType 
//If aquarium temp is lower than the set temperature - heat, otherwise do not heat
val delta1 = AQ_TempDelta1.state as DecimalType
//val delta2 = AQ_TempDelta2.state as DecimalType
switch (AQ_Logics_mode.state) {
	case 0: {
		logDebug("RULES","AQUARIUM: Mode set to OFF")
		sendCommand(AQ_Heater1,OFF)
		sendCommand(AQ_Cooler1,OFF)
		sendCommand(AQ_Light1,OFF)
	}
	case 1: logDebug("RULES","AQUARIUM: Mode set to manual")
	default: {
	logDebug("RULES","AQUARIUM: Mode set to AUTO")
	if(AQ_Set_Temperature.state=="UNDEFINED"||AQ_Set_Temperature.state=="NULL"||AQ_Set_Temperature.state=="Uninitialized"){postUpdate(AQ_Set_Temperature,25)}
	if ((aq_temp_sensor!="UNDEFINED"||aq_temp_sensor!="NULL")) { //&&(AQ_TempDelta1!="UNDEFINED"||AQ_TempDelta1!="NULL") 
		if (((aq_temp_sensor<aq_temp_set_temp)&&(lr_temp_sensor1<aq_temp_set_temp)||(aq_temp_sensor<aq_temp_set_temp-1))&&((delta1>-1.5)&&(delta1<1.5))) {  
			sendCommand(AQ_Heater1,ON)
		} else {
			sendCommand(AQ_Heater1,OFF)
		}
//A bit of complex logic for the FAN
// if difference between set and real temperature is more than 0.5C AND the delta for the last hour is more than 0.15C
// also if real vs set temperature is more than 1.5C
// also if Light is ON and the real temperature is more than the set temperature... 
// THEN - ON, else - OFF
		if (((aq_temp_sensor-aq_temp_set_temp)>0.5)&&(delta1>0.15)||(aq_temp_sensor>(aq_temp_set_temp+1.3))||((AQ_Light1.state==ON)&&(aq_temp_sensor>aq_temp_set_temp))) {
			sendCommand(AQ_Cooler1,ON)
		} else{
			sendCommand(AQ_Cooler1,OFF)
		}
	} //else { postUpdate(AQ_Set_Temperature,25) }
	logDebug("RULES","Aquarium logics end HERE")
	}
	}
end
/* 
rule "Refined aquarium logics triggered by sensor change"
when Item AQ_Temp_Sensor1 changed
then
val aq_temp_sensor=AQ_Temp_Sensor1.state as DecimalType
val aq_temp_set_temp=AQ_Set_Temperature.state as DecimalType
//If aquarium temp is lower than the set temperature - heat, otherwise do not heat
val delta=aq_temp_sensor - aq_temp_set_temp
	if (aq_temp_sensor!="UNDEFINED"||aq_temp_sensor!="NULL") { 
		if (delta < 0.5) {  
			sendCommand(AQ_Heater1,ON)
		} else {
			sendCommand(AQ_Heater1,OFF)
		}
//If aquarium temp different is higher than the 0.5 - start cooler, otherwise do not
		if (delta > 0.5) {
			sendCommand(AQ_Cooler1,ON)
		} else{
			sendCommand(AQ_Cooler1,OFF)
		}
	}
	logDebug("RULES","Aquarium logics end HERE")
end
*/

rule "Aquarium light on"  // between 19:00 and 0:00 on every 5 min check
when Time cron "0 */5 19-23 * * ?" 
then 
if(AQ_Light1.state==OFF&&AQ_Logics_mode.state==2) {
	sendCommand(AQ_Light1,ON) 
}
end

rule "Aquarium light off" // // between 0:00 and 19:00 on every 5 min check
when Time cron "0 */5 0-18 * * ?"  
then 
if(AQ_Light1.state==ON) {
	sendCommand(AQ_Light1,OFF) 
}
logDebug("RULES","Aquarium light on ends HERE")
end


//  here we track some statistics and send mail if anything bad happens
rule "Monitoring DIR and notifications"   // DIR USAGE
when Item DirUsage_root changed  
then
logDebug("MONITORING","Monitoring logics START here...")
	if(DirUsage_root.state as DecimalType>1500) {
		if(DirUsage_root.state as DecimalType>1600) {
			if(MailHDDCrit_timer==null) {
				logDebug("MONITORING","ROOT FOLDER: 98% CRITICAL TRESHOLD triggered")
				sendMail("polychronov@gmail.com","OPENHAB:DIR usage 98%","")
				MailHDDCrit_timer=createTimer(now.plusHours(1))[|]
			} else { 
				MailHDDCrit_timer.reschedule(now.plusHours(1))
			}
		} else {
			if(MailHDDWarn_timer==null) {
				logDebug("MONITORING","ROOT FOLDER: 95% WARNING TRESHOLD triggered")
				sendMail("polychronov@gmail.com","OPENHAB:DIR usage 95%","")
				MailHDDWarn_timer=createTimer(now.plusHours(1))[|]
			} else {
				MailHDDWarn_timer.reschedule(now.plusHours(1))
			}
		}
	} else {
		MailHDDWarn_timer.cancel
		MailHDDCrit_timer.cancel
		MailHDDWarn_timer=null
		MailHDDCrit_timer=null		
	}
end


rule "Monitoring Memory and notifications"  // MEMORY USAGE
when Item MemUsedPercent changed 
then
if(MemUsedPercent.state as DecimalType>80) {
	if(MemUsedPercent.state as DecimalType>90) {
		
		logDebug("MONITORING","MEMORY USAGE: 90% CRITICAL TRESHOLD triggered")
		sendMail("polychronov@gmail.com","OPENHAB:Memory usage 90%","")

	}
	logDebug("MONITORING","MEMORY USAGE: 80% WARNING TRESHOLD triggered")
	sendMail("polychronov@gmail.com","OPENHAB:Memory usage 80%","")
}
end

rule "Monitoring CPU and notifications"		// CPU USAGE
when Item OpenhabCpuPercent changed 
then
if(OpenhabCpuPercent.state as DecimalType>80) {
	if(OpenhabCpuPercent.state as DecimalType>90) {
		logDebug("MONITORING","CPU USAGE: 90% CRITICAL TRESHOLD triggered")
		sendMail("polychronov@gmail.com","OPENHAB:CPU usage 90%","")
	}
	logDebug("MONITORING","CPU USAGE: 80% WARNING TRESHOLD triggered")
	sendMail("polychronov@gmail.com","OPENHAB:CPU usage 80%","")
}
end

///  ======= Some Administrative tasks on buttons

rule "OpenHAB Administrative tasks" when Item OpenHAB received command then
// CLEANUP LOGS if state==1
	if(OpenHAB.state==1) {
	logDebug("EXEC","Cleaning up logs with command line")
	executeCommandLine("/hab/openhab/scripts/clean_logs.sh")
	sendMail("polychronov@gmail.com","OPENHAB:Initiated CLEAN UP logs","OPENHAB:Initiated CLEAN UP logs")
	postUpdate(OpenHAB,0)
	} else if(OpenHAB.state==2) {
		// RESTART OpenHAB if state==2
		logDebug("EXEC","Restarting OpenHAB upon user request via UI")
		executeCommandLine("/etc/init.d/openhab restart")
		sendMail("polychronov@gmail.com","OPENHAB:Initiated OpenHAB reboot","OPENHAB:Initiated OpenHAB reboot - triggered from UI")
		postUpdate(OpenHAB,0)
	}
end

rule "Trigger clean up logs if no enough space on /"
when Item DirUsage_root changed then
val RootUsage = DirUsage_root.state as DecimalType
if (RootUsage >=1551) { 
	sendCommand(OpenHAB,1)
	logInfo("EXEC","INITIATED CLEANUP of all LOGS due to not enough space on /")
}  // If Root folder is more than 1620MB clean up logs
end
/* 
rule "Backup system" when Item BackupSystem received command ON then
	logInfo("EXEC","Backup the system under /backup folder")
	executeCommandLine("/root/backup.sh",60000)
	postUpdate(BackupSystem,OFF)
end

/**/


//PLAYGROUND