import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.openhab.action.*

var Number counter = 1
var Timer timer = null
/*
rule Startup
when 
	System started
then
	say("Welcome at openHab!")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end
*/
/*rule "Crontest"
	when 
		Time cron "0/15 * * * * ?"
	then
		say(counter)
		counter = counter + 1
end	

/**
 * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands 
 * and posting an updated state on the bus 
 */


/**
 * This rule demonstrates how a NumberItem can be used to easily control the local sound system.
 * A selection widget in the UI provides easy access for this
 */
rule "Select Radio Station"
	when
		Item Radio_Station received command
	then
		switch(receivedCommand) {
			case 0 : playStream(null)
			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
		}
end



/**
 * The following rules help initializing the demo items with some helpful states.
 */

rule "Initialize states of variables"
	when
		System started or Item ALL_Reinitialize received command
	then 
//Living room initialize	
	sendCommand(LR_Heater1,OFF)   //default value of living room heater is OFF
	postUpdate(LR_Heater1_mode,2)  // default mode is AUTO
//	postUpdate(LR_Set_TemperatureON,20) // default manual temperature 20C
//	postUpdate(LR_Set_Temperature1,16)  //16C during work hours
//	postUpdate(LR_Set_Temperature2,20) // 20C when at home
//	postUpdate(LR_Set_Temperature3,18) //20C when at home and sleeping /16C for Living room
//	postUpdate(LR_Temp_sensor1)
//Aquarium initialize	
	sendCommand(AQ_Heater1,OFF)  // default aquarium heater off
	sendCommand(AQ_Cooler1,OFF)  // default aquarium cooler off
	sendCommand(AQ_Light1,OFF)  // default aquarium light off
	postUpdate(AQ_Logics_mode,2)  // default mode is AUTO
	sendCommand(OpenHAB,0)  // default aquarium heater off
	sendCommand(BackupSystem,OFF)  // default aquarium heater off
	postUpdate(Weather_Station_count,0); //clear reboot counter on reset
//	postUpdate(AQ_Set_Temperature,25) // 25C initial aquarium temp value
//	postUpdate(AQ_TempDelta,2) 
	logDebug("RULES","System Initialization ENDS HERE")
end

//rule "Evening shutters down"
//	when
//	then
//end
	
 /* */ 
rule "Update max and min temperatures"
when
	Item Weather_Temperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Weather_Temp_Max, Weather_temperature1.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, Weather_temperature1.minimumSince(now.toDateMidnight).state)
	postUpdate(AQ_Temp_MAX, AQ_Temp_Sensor1.maximumSince(now.toDateMidnight).state)
	postUpdate(AQ_Temp_MIN, AQ_Temp_Sensor1.minimumSince(now.toDateMidnight).state)
	logDebug("RULES","MIN/MAX ENDS HERE")
end

/** shows how to use sensor values from the past */
rule "Persistence Demo"
when
	Time cron "0 * * * * ?"
then	
	if(Weather_Temperature_yahoo.changedSince(now.minusMinutes(1))) {
		println("2 minutes ago, the temperature was " + Weather_Temperature_yahoo.historicState(now.minusMinutes(2)) + " degrees.")	
	}
	postUpdate(Weather_temperature1,Weather_Temperature_yahoo.state)
	logDebug("RULES","Persistence demo ends HERE")
end /* */

/////////////////////////////////////////////////////////////////////////////////////////// 
// Creates an item that stores the last update time of this item
rule "Weather update time" 
when Item Weather_Temperature1 received update then postUpdate(Weather_temperature1_LastUpdate, new DateTimeType())end

rule "LR temperature sensor update time"
when  Item LR_Temp_sensor1 received update then postUpdate(LR_Temp_sensor1_LastUpdate, new DateTimeType()) end

rule "LR Humidity update time"
when  Item LR_Humidity_sensor1 received update then postUpdate(LR_Humidity_sensor1_LastUpdate, new DateTimeType()) end

rule "Aquarium temperature update time"
when  Item AQ_Temp_sensor1 received update then postUpdate(AQ_Temp_Sensor1_LastUpdate, new DateTimeType()) end

rule "Weather pressure BMP180 update time"
when  Item Weather_pressure received update then postUpdate(Weather_pressure_LastUpdate, new DateTimeType()) end

rule "Weather altitude BMP180 update time"
when  Item Weather_altitude received update then postUpdate(Weather_altitude_LastUpdate, new DateTimeType()) end

rule "Weather temperature BMP180 update time"
when  Item Weather_temperature1 received update then postUpdate(Weather_temperature1_LastUpdate, new DateTimeType()) end

rule "Weather humidity DHT22 update time"
when  Item Weather_humidity received update then postUpdate(Weather_humidity_LastUpdate, new DateTimeType()) end

rule "Weather pressure XSLT"
when  Item Weather_pressure_reported received update then 
	sendCommand(Weather_pressure_set, Weather_pressure_reported.state.toString) 
end

rule "Weather arduino resets"
when Item Weather_Station_count received command then 
val Number count=Weather_Station_count.state as DecimalType
	counter=count+1
	postUpdate(Weather_Station_count,count) 
end



/* */
////////////////////////////////////////////////////////////////////////////////////////////
	

rule "Heating ON during workhours"
// PROGRAM1 During Work hours we check on each 1 hr the temperature and stop heating when reach 12C 
when Time cron "0 */5 9,10,11,12,13,14,15,16,17 ? * MON-FRI" 
then
//LR
	var float LR_Temp_Sensor1=new Float(LR_Temp_sensor1.state.toString())
	var float LR_Temp_Set_TemperatureON=new Float(LR_Set_TemperatureON.state.toString())
	var float LR_Temp_Set_Temperature1=new Float(LR_Set_Temperature1.state.toString())
	if(LR_Heater1_mode.state==2) {
 		if(LR_Temp_Sensor1 < LR_Temp_Set_Temperature1) { 
			sendCommand(LR_Heater1,ON)
		} else { 
			sendCommand(LR_Heater1,OFF)
		} 
	} else { 
		if (LR_Heater1_mode.state==1&&LR_Temp_Sensor1<LR_Temp_Set_TemperatureON){
			sendCommand(LR_Heater1,ON)
		} else { 
			sendCommand(LR_Heater1,OFF)
		} 
	}
	logDebug("RULES","Heating ON during workhours ends HERE")
end

rule "Heating ON during non-working hours"
//  PROGRAM2 During non-work, non-sleep hours we check on each 15 min the temperature and stop heating when reach 22C 
when Time cron "0 */5 18,19,20,21,22,23,0,7,8 * * ?" 
then
//LR
	var float LR_Temp_Sensor1=new Float(LR_Temp_sensor1.state.toString())
	var float LR_Temp_Set_TemperatureON=new Float(LR_Set_TemperatureON.state.toString())
	var float LR_Temp_Set_Temperature2=new Float(LR_Set_Temperature2.state.toString())
	if(LR_Heater1_mode.state==2) {
 		if(LR_Temp_Sensor1 < LR_Temp_Set_Temperature2) { 
			sendCommand(LR_Heater1,ON)
		} else { 
			sendCommand(LR_Heater1,OFF)
		} 
	} else { 
		if (LR_Heater1_mode.state==1&&LR_Temp_Sensor1<LR_Temp_Set_TemperatureON){
			sendCommand(LR_Heater1,ON)
		} else { 
			sendCommand(LR_Heater1,OFF)
		} 
	}
//ROOM2
//ROOM3
end

rule "Heating ON during non-working sleep hours"
// PROGRAM3 During non-work, sleep hours we check on each 15 min the temperature and stop heating when reach 18C 
when Time cron "0 */15 1,2,3,4,5,6 * * ?" 
then
//LR
	var float LR_Temp_Sensor1=new Float(LR_Temp_sensor1.state.toString())
	var float LR_Temp_Set_TemperatureON=new Float(LR_Set_TemperatureON.state.toString())
	var float LR_Temp_Set_Temperature3=new Float(LR_Set_Temperature3.state.toString())
	if(LR_Heater1_mode.state==2) {
 		if(LR_Temp_Sensor1 < LR_Temp_Set_Temperature3) { 
			sendCommand(LR_Heater1,ON)
		} else { 
			sendCommand(LR_Heater1,OFF)
		} 
	} else { 
		if (LR_Heater1_mode.state==1&&LR_Temp_Sensor1<LR_Temp_Set_TemperatureON){
			sendCommand(LR_Heater1,ON)
		} else { 
			sendCommand(LR_Heater1,OFF)
		} 
	}
//ROOM2
//ROOM3
logDebug("RULES","Heating ON during non-workhours ends HERE")
end

rule "Heating during the day - Saturday and Sunday"
when Time cron"0 */5 9,10,11,12,13,14,15,16,17 ? * SAT,SUN"
then
//LR
	var float LR_Temp_Sensor1=new Float(LR_Temp_sensor1.state.toString())
	var float LR_Temp_Set_TemperatureON=new Float(LR_Set_TemperatureON.state.toString())
	var float LR_Temp_Set_Temperature2=new Float(LR_Set_Temperature2.state.toString())
	if(LR_Heater1_mode.state==2) {
 		if(LR_Temp_Sensor1 < LR_Temp_Set_Temperature2) { 
			sendCommand(LR_Heater1,ON)
		} else { 
			sendCommand(LR_Heater1,OFF)
		} 
	} else { 
		if (LR_Heater1_mode.state==1&&LR_Temp_Sensor1<LR_Temp_Set_TemperatureON){
			sendCommand(LR_Heater1,ON)
		} else { 
			sendCommand(LR_Heater1,OFF)
		} 
	}
	logDebug("RULES","Heating during weekend ends HERE")
end

/* LR Triggers */
rule "HeatingMode trigger"
	when
		Item LR_Heater1_mode received command
	then
	var float LR_Temp_Sensor1=new Float(LR_Temp_sensor1.state.toString())
	var float LR_Temp_Set_TemperatureON=new Float(LR_Set_TemperatureON.state.toString())
	switch(LR_Heater1_mode.state) {
			case 0 : 	sendCommand(LR_Heater1,OFF)
			
			case 1 : 	if(LR_Temp_Sensor1<LR_Temp_Set_TemperatureON) {
							sendCommand(LR_Heater1,ON)
						} else {
							sendCommand(LR_Heater1,OFF)
						}
			
			default : 	println("Heat Indicator set to AUTO")
		}
	logDebug("RULES","Heating MODE trigger ends HERE")
end

rule "LR Heater Set Temperature change"
	when
		Item LR_Set_TemperatureON received command
		then
			var float LR_Temp_Sensor1=new Float(LR_Temp_sensor1.state.toString())
			var float LR_Temp_Set_TemperatureON=new Float(LR_Set_TemperatureON.state.toString())
			postUpdate(LR_Heater1_mode,1)
			if (LR_Temp_Sensor1<LR_Temp_Set_TemperatureON){
				sendCommand(LR_Heater1,ON)
			} else { 
				sendCommand(LR_Heater1,OFF)
			} 
	logDebug("RULES","Heater Set temperature ends HERE")		
end

rule "Calculate AQ delta"
	when Time cron"0 1 * * * ?"
	then
val tmp2 = AQ_Temp_Sensor1.averageSince(now.minusMinutes(90),"mysql").floatValue
val tmp1 = AQ_Temp_Sensor1.averageSince(now.minusMinutes(15),"mysql").floatValue
		val delta1 = tmp1 - tmp2  
		postUpdate(AQ_TempDelta1,delta1)	
//		logInfo("RULES","Tmp1=" + tmp1)
end

/***************************AQUARIUM *********************************/
rule "Aquarium logics"
when Time cron "0 */15 * * * ?" or Item AQ_Logics_mode received command or Item AQ_Temp_Sensor1 changed
then
var float aq_temp_sensor=new Float(AQ_Temp_Sensor1.state.toString())
var float aq_temp_set_temp=new Float(AQ_Set_Temperature.state.toString())
val lr_temp_sensor1=LR_Temp_sensor1.state as DecimalType 
//If aquarium temp is lower than the set temperature - heat, otherwise do not heat
val delta1 = AQ_TempDelta1.state as DecimalType
//val delta2 = AQ_TempDelta2.state as DecimalType
switch (AQ_Logics_mode.state) {
	case 0: {
		logDebug("RULES","AQUARIUM: Mode set to OFF")
		sendCommand(AQ_Heater1,OFF)
		sendCommand(AQ_Cooler1,OFF)
		sendCommand(AQ_Light1,OFF)
	}
	case 1: logDebug("RULES","AQUARIUM: Mode set to manual")
	default: {
	logDebug("RULES","AQUARIUM: Mode set to AUTO")
	if ((aq_temp_sensor!="UNDEFINED"||aq_temp_sensor!="NULL")&&(AQ_TempDelta1!="UNDEFINED"||AQ_TempDelta1!="NULL")) { 
		if (((aq_temp_sensor<aq_temp_set_temp)&&(lr_temp_sensor1<aq_temp_set_temp)||(aq_temp_sensor<aq_temp_set_temp-1))&&((delta1>-1.5)&&(delta1<1.5))) {  
			sendCommand(AQ_Heater1,ON)
		} else {
			sendCommand(AQ_Heater1,OFF)
		}
//A bit of complex logic for the FAN
// if difference between set and real temperature is more than 0.5C AND the delta for the last hour is more than 0.15C
// also if real vs set temperature is more than 1.5C
// also if Light is ON and the real temperature is more than the set temperature... 
// THEN - ON, else - OFF
		if (((aq_temp_sensor-aq_temp_set_temp)>0.5)&&(delta1>0.15)||(aq_temp_sensor>(aq_temp_set_temp+1.3))||((AQ_Light1.state==ON)&&(aq_temp_sensor>aq_temp_set_temp))) {
			sendCommand(AQ_Cooler1,ON)
		} else{
			sendCommand(AQ_Cooler1,OFF)
		}
	}
	logDebug("RULES","Aquarium logics end HERE")
	}
	}
end
/* 
rule "Refined aquarium logics triggered by sensor change"
when Item AQ_Temp_Sensor1 changed
then
val aq_temp_sensor=AQ_Temp_Sensor1.state as DecimalType
val aq_temp_set_temp=AQ_Set_Temperature.state as DecimalType
//If aquarium temp is lower than the set temperature - heat, otherwise do not heat
val delta=aq_temp_sensor - aq_temp_set_temp
	if (aq_temp_sensor!="UNDEFINED"||aq_temp_sensor!="NULL") { 
		if (delta < 0.5) {  
			sendCommand(AQ_Heater1,ON)
		} else {
			sendCommand(AQ_Heater1,OFF)
		}
//If aquarium temp different is higher than the 0.5 - start cooler, otherwise do not
		if (delta > 0.5) {
			sendCommand(AQ_Cooler1,ON)
		} else{
			sendCommand(AQ_Cooler1,OFF)
		}
	}
	logDebug("RULES","Aquarium logics end HERE")
end
*/

rule "Aquarium light on"  // between 19:00 and 0:00 on every 5 min check
when Time cron "0 */5 19-23 * * ?" 
then 
if(AQ_Light1.state==OFF&&AQ_Logics_mode.state==2) {
	sendCommand(AQ_Light1,ON) 
}
end

rule "Aquarium light off" // // between 0:00 and 19:00 on every 5 min check
when Time cron "0 */5 0-18 * * ?"  
then 
if(AQ_Light1.state==ON) {
	sendCommand(AQ_Light1,OFF) 
}
logDebug("RULES","Aquarium light on ends HERE")
end


//  here we track some statistics and send mail if anything bad happens
rule "Monitoring DIR and notifications"   // DIR USAGE
when Item DirUsage_root changed  
then
logDebug("MONITORING","Monitoring logics START here...")
	if(DirUsage_root.state as DecimalType>1500) {
		if(DirUsage_root.state as DecimalType>1600) {
				logDebug("MONITORING","ROOT FOLDER: 98% CRITICAL TRESHOLD triggered")
				sendMail("polychronov@gmail.com","OPENHAB:DIR usage 98%","")
			} else {
				logDebug("MONITORING","ROOT FOLDER: 95% WARNING TRESHOLD triggered")
				sendMail("polychronov@gmail.com","OPENHAB:DIR usage 95%","")
				// put mailsend here....
			}
	}
end

rule "Monitoring Memory and notifications"  // MEMORY USAGE
when Item MemUsedPercent changed 
then
if(MemUsedPercent.state as DecimalType>80) {
	if(MemUsedPercent.state as DecimalType>90) {
		logDebug("MONITORING","MEMORY USAGE: 90% CRITICAL TRESHOLD triggered")
		sendMail("polychronov@gmail.com","OPENHAB:Memory usage 90%","")

	}
	logDebug("MONITORING","MEMORY USAGE: 80% WARNING TRESHOLD triggered")
	sendMail("polychronov@gmail.com","OPENHAB:Memory usage 80%","")
}
end

rule "Monitoring CPU and notifications"		// CPU USAGE
when Item OpenhabCpuPercent changed 
then
if(OpenhabCpuPercent.state as DecimalType>80) {
	if(OpenhabCpuPercent.state as DecimalType>90) {
		logDebug("MONITORING","CPU USAGE: 90% CRITICAL TRESHOLD triggered")
		sendMail("polychronov@gmail.com","OPENHAB:CPU usage 90%","")
	}
	logDebug("MONITORING","CPU USAGE: 80% WARNING TRESHOLD triggered")
	sendMail("polychronov@gmail.com","OPENHAB:CPU usage 80%","")
}
end

///  ======= Some Administrative tasks on buttons

rule "OpenHAB Administrative tasks" when Item OpenHAB received command then
// CLEANUP LOGS if state==1
	if(OpenHAB.state==1) {
	logDebug("EXEC","Cleaning up logs with command line")
	executeCommandLine("/hab/openhab/scripts/clean_logs.sh")
	sendMail("polychronov@gmail.com","OPENHAB:Initiated CLEAN UP logs","OPENHAB:Initiated CLEAN UP logs")
	postUpdate(OpenHAB,0)
	} else if(OpenHAB.state==2) {
		// RESTART OpenHAB if state==2
		logDebug("EXEC","Restarting OpenHAB upon user request via UI")
		executeCommandLine("/etc/init.d/openhab restart")
		sendMail("polychronov@gmail.com","OPENHAB:Initiated OpenHAB reboot","OPENHAB:Initiated OpenHAB reboot - triggered from UI")
		postUpdate(OpenHAB,0)
	}
end

rule "Trigger clean up logs if no enough space on /"
when Item DirUsage_root changed then
val RootUsage = DirUsage_root.state as DecimalType
if (RootUsage >=1551) { 
	sendCommand(OpenHAB,1)
	logInfo("EXEC","INITIATED CLEANUP of all LOGS due to not enough space on /")
}  // If Root folder is more than 1620MB clean up logs
end
/* 
rule "Backup system" when Item BackupSystem received command ON then
	logInfo("EXEC","Backup the system under /backup folder")
	executeCommandLine("/root/backup.sh",60000)
	postUpdate(BackupSystem,OFF)
end

/**/


//PLAYGROUND